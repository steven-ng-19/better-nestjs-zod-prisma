"use strict";var e=require("@prisma/generator-helper"),t=require("ts-morph"),n=require("typescript"),a=require("zod");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=r(require("path"));const i=a.z.enum(["true","false"]).transform((e=>"true"===e)),s=a.z.object({relationModel:i.default("true").or(a.z.literal("default")),generateDto:i.default("true"),modelSuffix:a.z.string().default("Model"),dtoSuffix:a.z.string().default("Dto"),modelCase:a.z.enum(["PascalCase","camelCase"]).default("PascalCase"),dtoCase:a.z.enum(["PascalCase","camelCase"]).default("PascalCase"),useDecimalJs:i.default("false"),imports:a.z.string().optional(),prismaJsonNullability:i.default("true"),enableOpenAPI:i.default("false")});var l;!function(e){e.Start="@z.",e.Append="@z&."}(l||(l={}));const d={[l.Start]:1,[l.Append]:3};function c(e,t){return!function(e,t=Object.values(l)){return t.some((t=>e.trim().startsWith(t)))}(e,t)}function m(e,t){for(const n of e)if(!c(n,[t]))return n.trim().slice(d[t]);return null}const u=e=>{const t=[];if(e){const n=e.split("\n").filter((e=>c(e)));n.length>0&&(t.push("/**"),n.forEach((e=>t.push(` * ${e}`))),t.push(" */"))}return t},p={String:"z.string()",Int:"z.number().int()",BigInt:"z.bigint()",DateTime:"z.date()",Float:"z.number()",Decimal:"z.number()",Json:"z.string()",Boolean:"z.boolean()",Bytes:"z.instanceOf(Buffer)"},f=(e,t=(e=>e.toString()))=>{let n;n="scalar"===e.kind&&"string"==typeof e.type&&Object.prototype.hasOwnProperty.call(p,e.type)?p[e.type]:"enum"===e.kind?`z.nativeEnum($Enums.${e.type})`:"object"===e.kind?t(e.type):"z.unknown()";let a=!1;if(e.documentation){const t=m(e.documentation.split("\n"),l.Start),r=function(e){const t=[];for(const n of e.split("\n")){const e=m([n],l.Append);e&&t.push(e)}return t}(e.documentation);t&&(a=!0,n=t);for(const e of r)n+=e}return e.isList&&!a&&(n+=".array()"),e.isRequired||"Json"===e.type||(n+=".nullable()"),n},h=(e,t,n=!0)=>t.forEach((t=>e.write(t).conditionalNewLine(n))),S=({modelCase:e,modelSuffix:t,dtoSuffix:n,dtoCase:a,relationModel:r})=>{const o=(n,a="")=>{let r=n;return"camelCase"===e&&(r=r.slice(0,1).toLowerCase()+r.slice(1)),`${a}${r}${t}`};return{modelName:e=>o(e,"default"===r?"_":""),dtoName:e=>(e=>{let t=e;return"camelCase"===a&&(t=t.slice(0,1).toLowerCase()+t.slice(1)),`${t}${n}`})(e),relatedModelName:e=>o("default"===r?e.toString():`Related${e.toString()}`)}},z=e=>{const t=e.replace(/^\\\\\?\\/,"").replace(/\\/g,"/").replace(/\/\/+/g,"/");return t.includes("/node_modules/")?t.split("/node_modules/").slice(-1)[0]:t.startsWith("../")?t:"./"+t},{version:y}=require("../package.json");e.generatorHandler({onManifest:()=>({version:y,prettyName:"NestJS Zod Schemas",defaultOutput:"./src/zod"}),onGenerate(e){const a=new t.Project,r=e.dmmf.datamodel.models,i=e.dmmf.datamodel.enums,{schemaPath:l}=e,d=e.generator.output.value,c=e.otherGenerators.find((e=>"prisma-client-js"===e.provider.value)).output.value,m=s.safeParse(e.generator.config);if(!m.success)throw new Error("Incorrect config provided. Please check the values you provided and try again.");const p=m.data,y={clientPath:c,outputPath:d,schemaPath:l},g=a.createSourceFile(`${d}/index.ts`,{},{overwrite:!0});if(((e,t)=>{e.forEach((e=>t.addExportDeclaration({moduleSpecifier:`./${e.name.toLowerCase()}`})))})(r,g),g.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:n.SemicolonPreference.Remove}),r.forEach((e=>{const r=a.createSourceFile(`${d}/${e.name.toLowerCase()}.ts`,{},{overwrite:!0});((e,n,a,r)=>{((e,n,a,{schemaPath:r,outputPath:i})=>{const{relatedModelName:s}=S(a),l=[{kind:t.StructureKind.ImportDeclaration,namespaceImport:"z",moduleSpecifier:"zod"}];a.enableOpenAPI&&(l.push({kind:t.StructureKind.ImportDeclaration,namedImports:["$Enums"],moduleSpecifier:"@prisma/client"}),l.push({kind:t.StructureKind.ImportDeclaration,namedImports:["extendZodWithOpenApi"],moduleSpecifier:"@anatine/zod-openapi"})),a.generateDto&&l.push({kind:t.StructureKind.ImportDeclaration,namedImports:["createZodDto"],moduleSpecifier:"@anatine/zod-nestjs"}),a.imports&&l.push({kind:t.StructureKind.ImportDeclaration,namespaceImport:"imports",moduleSpecifier:z(o.default.relative(i,o.default.resolve(o.default.dirname(r),a.imports)))}),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&l.push({kind:t.StructureKind.ImportDeclaration,namedImports:["Decimal"],moduleSpecifier:"decimal.js"});const d=e.fields.filter((e=>"enum"===e.kind)),c=new Set,m=d.filter((e=>{const t=e.type;return!c.has(t)&&(c.add(t),!0)}));m.length>0&&l.push({kind:t.StructureKind.ImportDeclaration,isTypeOnly:0===m.length,moduleSpecifier:z("enums"),namedImports:m.map((e=>e.type))});const u=e.fields.filter((e=>"object"===e.kind));if(!1!==a.relationModel&&u.length>0){const n=u.filter((t=>t.type!==e.name));n.length>0&&l.push({kind:t.StructureKind.ImportDeclaration,moduleSpecifier:"./index",namedImports:Array.from(new Set(n.flatMap((e=>[`Complete${e.type}`,s(e.type)]))))})}n.addImportDeclarations(l),a.enableOpenAPI&&n.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,declarations:[{initializer:e=>e.write("extendZodWithOpenApi(z)"),name:"zodOpenApi"}]})})(e,n,a,r),((e,t,n,a)=>{n.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&t.addStatements((e=>{e.newLine(),h(e,["// Helper schema for Decimal fields","z",".instanceof(Decimal)",".or(z.string())",".or(z.number())",".refine((value) => {","  try {","    return new Decimal(value);","  } catch (error) {","    return false;","  }","})",".transform((value) => new Decimal(value));"])}))})(e,n,a),((e,n,a,r)=>{const{modelName:o}=S(a);n.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:o(e.name),initializer(t){t.write("z.object(").inlineBlock((()=>{e.fields.filter((e=>"object"!==e.kind)).forEach((e=>{h(t,u(e.documentation)),t.write(`${e.name}: ${f(e)}`).write(",").newLine()}))})).write(")")}}]})})(e,n,a),a.generateDto&&((e,t,n)=>{const{modelName:a,dtoName:r}=S(n);t.addClass({name:r(e.name),isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),extends:`createZodDto(${a(e.name)})`})})(e,n,a),((e,t)=>e.fields.some((e=>"object"===e.kind))&&!1!==t.relationModel)(e,a)&&((e,n,a,r)=>{const{modelName:o,relatedModelName:i}=S(a),s=e.fields.filter((e=>"object"===e.kind));n.addInterface({name:`Complete${e.name}`,isExported:!0,extends:[`z.infer<typeof ${o(e.name)}>`],properties:s.map((e=>({hasQuestionToken:!e.isRequired,name:`${e.name}?`,type:`Complete${e.type}${e.isList?"[]":""}${e.isRequired?"":" | null"}`})))}),n.addStatements((t=>h(t,["","/**",` * ${i(e.name)} contains all relations on your model in addition to the scalars`," *"," * NOTE: Lazy required in case of potential circular dependencies within schema"," */"]))),n.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,declarations:[{name:i(e.name),type:`z.ZodSchema<Complete${e.name}>`,initializer(t){t.write(`z.lazy(() => ${o(e.name)}.extend(`).inlineBlock((()=>{s.forEach((e=>{h(t,u(e.documentation)),t.write(`${e.name}: ${f(e,i)}`).write(",").newLine()}))})).write("))")}}]})})(e,n,a)})(e,r,p,y),r.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:n.SemicolonPreference.Remove})})),i.length>0){const e=a.createSourceFile(`${d}/enums.ts`,{},{overwrite:!0});((e,t)=>{for(const{name:n,values:a}of e){const e=a.map((({name:e})=>({name:e,value:e})));t.addEnum({name:n,members:e}).setIsExported(!0)}})(i,e),e.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:n.SemicolonPreference.Remove})}return a.save()}});
//# sourceMappingURL=better-nestjs-zod-prisma.cjs.production.min.js.map
