{"version":3,"file":"better-nestjs-zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/docs.ts","../src/types.ts","../src/util.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z\n  .enum(['true', 'false'])\n  .transform((arg) => arg === 'true')\n\nexport const configSchema = z.object({\n  relationModel: configBoolean.default('true').or(z.literal('default')),\n  generateDto: configBoolean.default('true'),\n  modelSuffix: z.string().default('Model'),\n  dtoSuffix: z.string().default('Dto'),\n  modelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n  dtoCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n  useDecimalJs: configBoolean.default('false'),\n  imports: z.string().optional(),\n  prismaJsonNullability: configBoolean.default('true'),\n  enableOpenAPI: configBoolean.default('false')\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport interface PrismaOptions {\n  schemaPath: string\n  outputPath: string\n  clientPath: string\n}\n\nexport interface Names {\n  model: string\n  related: string\n}\n","enum Directive {\n  Start = '@z.',\n  Append = '@z&.',\n}\n\nconst SLICE_OFFSETS: Record<Directive, number> = {\n  [Directive.Start]: 1,\n  [Directive.Append]: 3,\n}\n\nfunction hasDirectives(line: string, directives = Object.values(Directive)) {\n  return directives.some((directive) => {\n    return line.trim().startsWith(directive)\n  })\n}\n\nfunction hasNoDirectives(line: string, directives?: Directive[]) {\n  return !hasDirectives(line, directives)\n}\n\nfunction extractDirectiveValue(lines: string[], directive: Directive) {\n  for (const line of lines) {\n    if (hasNoDirectives(line, [directive])) continue\n    return line.trim().slice(SLICE_OFFSETS[directive])\n  }\n\n  return null\n}\n\nexport const getJSDocs = (docString?: string) => {\n  const lines: string[] = []\n\n  if (docString) {\n    const docLines = docString\n      .split('\\n')\n      .filter((line) => hasNoDirectives(line))\n\n    if (docLines.length > 0) {\n      lines.push('/**')\n      docLines.forEach((line) => lines.push(` * ${line}`))\n      lines.push(' */')\n    }\n  }\n\n  return lines\n}\n\nexport function findCustomSchema(documentation: string): string | null {\n  const lines = documentation.split('\\n')\n  return extractDirectiveValue(lines, Directive.Start)\n}\n\nexport function findSchemaAppends(documentation: string): string[] {\n  const appends: string[] = []\n\n  for (const line of documentation.split('\\n')) {\n    const append = extractDirectiveValue([line], Directive.Append)\n    if (append) appends.push(append)\n  }\n\n  return appends\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { findCustomSchema, findSchemaAppends } from './docs'\n\nconst mapScalarType: Record<string, string> = {\n  String: 'z.string()',\n  Int: 'z.number().int()',\n  BigInt: 'z.bigint()',\n  DateTime: 'z.date()',\n  Float: 'z.number()',\n  Decimal: 'z.number()',\n  Json: 'z.string()',\n  Boolean: 'z.boolean()',\n  Bytes: 'z.instanceOf(Buffer)',\n}\n\nexport const getZodConstructor = (\n  field: DMMF.Field,\n  getRelatedModelName = (\n    name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg\n  ) => name.toString()\n) => {\n  let schema: string\n\n  if (\n    field.kind === 'scalar' &&\n    typeof field.type === 'string' &&\n    Object.prototype.hasOwnProperty.call(mapScalarType, field.type)\n  ) {\n    schema = mapScalarType[field.type]\n  } else if (field.kind === 'enum') {\n    schema = `z.nativeEnum($Enums.${field.type})`\n  } else if (field.kind === 'object') {\n    schema = getRelatedModelName(field.type)\n  } else {\n    schema = 'z.unknown()'\n  }\n\n  let isCustom = false\n\n  if (field.documentation) {\n    const custom = findCustomSchema(field.documentation)\n    const appends = findSchemaAppends(field.documentation)\n\n    if (custom) {\n      isCustom = true\n      schema = custom\n    }\n\n    for (const append of appends) {\n      schema += append\n    }\n  }\n\n  if (field.isList && !isCustom) {\n    schema += '.array()'\n  }\n\n  if (!field.isRequired && field.type !== 'Json') {\n    schema += '.nullable()'\n  }\n\n  return schema\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (\n  writer: CodeBlockWriter,\n  array: string[],\n  newLine = true\n) => array.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({\n  modelCase,\n  modelSuffix,\n  dtoSuffix,\n  dtoCase,\n  relationModel,\n}: Config) => {\n  const formatModelName = (name: string, prefix = '') => {\n    let result = name\n    if (modelCase === 'camelCase') {\n      result = result.slice(0, 1).toLowerCase() + result.slice(1)\n    }\n    return `${prefix}${result}${modelSuffix}`\n  }\n\n  const formatDtoName = (name: string) => {\n    let result = name\n    if (dtoCase === 'camelCase') {\n      result = result.slice(0, 1).toLowerCase() + result.slice(1)\n    }\n    return `${result}${dtoSuffix}`\n  }\n\n  return {\n    modelName: (name: string) =>\n      formatModelName(name, relationModel === 'default' ? '_' : ''),\n    dtoName: (name: string) => formatDtoName(name),\n    relatedModelName: (\n      name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg\n    ) =>\n      formatModelName(\n        relationModel === 'default'\n          ? name.toString()\n          : `Related${name.toString()}`\n      ),\n  }\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n  model.fields.some((field) => field.kind === 'object') &&\n  config.relationModel !== false\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n  return input.reduce((array, item, idx) => {\n    return idx % size === 0\n      ? [...array, [item]]\n      : [...array.slice(0, -1), [...array.slice(-1)[0], item]]\n  }, [])\n}\n\nexport const dotSlash = (input: string) => {\n  const converted = input\n    .replace(/^\\\\\\\\\\?\\\\/, '')\n    .replace(/\\\\/g, '/')\n    .replace(/\\/\\/+/g, '/')\n\n  if (converted.includes(`/node_modules/`))\n    return converted.split(`/node_modules/`).slice(-1)[0]\n\n  if (converted.startsWith(`../`)) return converted\n\n  return './' + converted\n}\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n  ImportDeclarationStructure,\n  SourceFile,\n  StructureKind,\n  VariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\n\nexport const writeImportsForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  { schemaPath, outputPath }: PrismaOptions\n) => {\n  const { relatedModelName } = useModelNames(config)\n\n  const importList: ImportDeclarationStructure[] = [\n    {\n      kind: StructureKind.ImportDeclaration,\n      namespaceImport: 'z',\n      moduleSpecifier: 'zod',\n    },\n  ]\n\n  if (config.enableOpenAPI) {\n    // ability to use openapi in nestjs-zod\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['$Enums'],\n      moduleSpecifier: '@prisma/client',\n    })\n\n    // ability to use openapi in nestjs-zod\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['extendZodWithOpenApi'],\n      moduleSpecifier: '@anatine/zod-openapi',\n    })\n  }\n\n  if (config.generateDto) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['createZodDto'],\n      moduleSpecifier: '@anatine/zod-nestjs',\n    })\n  }\n\n  if (config.imports) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namespaceImport: 'imports',\n      moduleSpecifier: dotSlash(\n        path.relative(\n          outputPath,\n          path.resolve(path.dirname(schemaPath), config.imports)\n        )\n      ),\n    })\n  }\n\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['Decimal'],\n      moduleSpecifier: 'decimal.js',\n    })\n  }\n\n  const enumFields = model.fields.filter((f) => f.kind === 'enum')\n\n  // Keep track of imported enum types\n  const importedEnums = new Set<string>()\n\n  // Filter out duplicate enum types\n  const uniqueEnumFields = enumFields.filter((f) => {\n    const typeName = f.type\n    if (!importedEnums.has(typeName)) {\n      importedEnums.add(typeName)\n      return true\n    }\n    return false\n  })\n\n  if (uniqueEnumFields.length > 0) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      isTypeOnly: uniqueEnumFields.length === 0,\n      moduleSpecifier: dotSlash('enums'),\n      namedImports: uniqueEnumFields.map((f) => f.type),\n    })\n  }\n\n  const relationFields = model.fields.filter((f) => f.kind === 'object')\n\n  if (config.relationModel !== false && relationFields.length > 0) {\n    const filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n    if (filteredFields.length > 0) {\n      importList.push({\n        kind: StructureKind.ImportDeclaration,\n        moduleSpecifier: './index',\n        namedImports: Array.from(\n          new Set(\n            filteredFields.flatMap((f) => [\n              `Complete${f.type}`,\n              relatedModelName(f.type),\n            ])\n          )\n        ),\n      })\n    }\n  }\n\n  sourceFile.addImportDeclarations(importList)\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    declarations: [\n      {\n        initializer: (writer) => writer.write('extendZodWithOpenApi(z)'),\n        name: 'zodOpenApi',\n      },\n    ],\n  })\n}\n\nexport const writeTypeSpecificSchemas = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    sourceFile.addStatements((writer) => {\n      writer.newLine()\n      writeArray(writer, [\n        '// Helper schema for Decimal fields',\n        'z',\n        '.instanceof(Decimal)',\n        '.or(z.string())',\n        '.or(z.number())',\n        '.refine((value) => {',\n        '  try {',\n        '    return new Decimal(value);',\n        '  } catch (error) {',\n        '    return false;',\n        '  }',\n        '})',\n        '.transform((value) => new Decimal(value));',\n      ])\n    })\n  }\n}\n\nexport const generateSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName } = useModelNames(config)\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n    declarations: [\n      {\n        name: modelName(model.name),\n        initializer(writer) {\n          writer\n            .write('z.object(')\n            .inlineBlock(() => {\n              model.fields\n                .filter((f) => f.kind !== 'object')\n                .forEach((field) => {\n                  writeArray(writer, getJSDocs(field.documentation))\n                  writer\n                    .write(`${field.name}: ${getZodConstructor(field)}`)\n                    .write(',')\n                    .newLine()\n                })\n            })\n            .write(')')\n        },\n      },\n    ],\n  })\n}\n\nexport const generateDto = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config\n) => {\n  const { modelName, dtoName } = useModelNames(config)\n\n  sourceFile.addClass({\n    name: dtoName(model.name),\n    isExported: true,\n    leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n    extends: `createZodDto(${modelName(model.name)})`,\n  })\n}\n\nexport const generateRelatedSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName, relatedModelName } = useModelNames(config)\n\n  const relationFields = model.fields.filter((f) => f.kind === 'object')\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}`,\n    isExported: true,\n    extends: [`z.infer<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map((f) => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}${f.isList ? '[]' : ''}${\n        !f.isRequired ? ' | null' : ''\n      }`,\n    })),\n  })\n\n  sourceFile.addStatements((writer) =>\n    writeArray(writer, [\n      '',\n      '/**',\n      ` * ${relatedModelName(\n        model.name\n      )} contains all relations on your model in addition to the scalars`,\n      ' *',\n      ' * NOTE: Lazy required in case of potential circular dependencies within schema',\n      ' */',\n    ])\n  )\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    declarations: [\n      {\n        name: relatedModelName(model.name),\n        type: `z.ZodSchema<Complete${model.name}>`,\n        initializer(writer) {\n          writer\n            .write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n            .inlineBlock(() => {\n              relationFields.forEach((field) => {\n                writeArray(writer, getJSDocs(field.documentation))\n\n                writer\n                  .write(\n                    `${field.name}?: ${getZodConstructor(\n                      field,\n                      relatedModelName\n                    )}`\n                  )\n                  .write(',')\n                  .newLine()\n              })\n            })\n            .write('))')\n        },\n      },\n    ],\n  })\n}\n\nexport const populateModelFile = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  prismaOptions: PrismaOptions\n) => {\n  writeImportsForModel(model, sourceFile, config, prismaOptions)\n  writeTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n  generateSchemaForModel(model, sourceFile, config, prismaOptions)\n  if (config.generateDto) generateDto(model, sourceFile, config)\n  if (needsRelatedModel(model, config))\n    generateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (\n  models: DMMF.Model[],\n  indexFile: SourceFile\n) => {\n  models.forEach((model) =>\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${model.name.toLowerCase()}`,\n    })\n  )\n}\n\nexport const generateEnumsFile = (\n  enums: DMMF.DatamodelEnum[],\n  enumsFile: SourceFile\n) => {\n  for (const { name, values } of enums) {\n    const members = values.map(({ name: memberName }) => {\n      return { name: memberName, value: memberName }\n    })\n\n    enumsFile\n      .addEnum({\n        name,\n        members,\n      })\n      .setIsExported(true)\n  }\n}\n","import { generatorHandler } from '@prisma/generator-helper'\nimport { Project } from 'ts-morph'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport {\n  populateModelFile,\n  generateBarrelFile,\n  generateEnumsFile,\n} from './generator'\n\nconst { version } = require('../package.json')\n\ngeneratorHandler({\n  onManifest() {\n    return {\n      version,\n      prettyName: 'NestJS Zod Schemas',\n      defaultOutput: './src/zod',\n    }\n  },\n  onGenerate(options) {\n    const project = new Project()\n\n    const models = options.dmmf.datamodel.models\n    const enums = options.dmmf.datamodel.enums\n\n    const { schemaPath } = options\n    const outputPath = options.generator.output!.value\n    const clientPath = options.otherGenerators.find(\n      (each) => each.provider.value === 'prisma-client-js'\n    )!.output!.value!\n\n    const results = configSchema.safeParse(options.generator.config)\n    if (!results.success)\n      throw new Error(\n        'Incorrect config provided. Please check the values you provided and try again.'\n      )\n\n    const config = results.data\n    const prismaOptions: PrismaOptions = {\n      clientPath,\n      outputPath,\n      schemaPath,\n    }\n\n    const indexFile = project.createSourceFile(\n      `${outputPath}/index.ts`,\n      {},\n      { overwrite: true }\n    )\n\n    generateBarrelFile(models, indexFile)\n\n    indexFile.formatText({\n      indentSize: 2,\n      convertTabsToSpaces: true,\n      semicolons: SemicolonPreference.Remove,\n    })\n\n    models.forEach((model) => {\n      const sourceFile = project.createSourceFile(\n        `${outputPath}/${model.name.toLowerCase()}.ts`,\n        {},\n        { overwrite: true }\n      )\n\n      populateModelFile(model, sourceFile, config, prismaOptions)\n\n      sourceFile.formatText({\n        indentSize: 2,\n        convertTabsToSpaces: true,\n        semicolons: SemicolonPreference.Remove,\n      })\n    })\n\n    if (enums.length > 0) {\n      const enumsFile = project.createSourceFile(\n        `${outputPath}/enums.ts`,\n        {},\n        { overwrite: true }\n      )\n\n      generateEnumsFile(enums, enumsFile)\n\n      enumsFile.formatText({\n        indentSize: 2,\n        convertTabsToSpaces: true,\n        semicolons: SemicolonPreference.Remove,\n      })\n    }\n\n    return project.save()\n  },\n})\n"],"names":["configBoolean","z","enum","transform","arg","configSchema","object","relationModel","default","or","literal","generateDto","modelSuffix","string","dtoSuffix","modelCase","dtoCase","useDecimalJs","imports","optional","prismaJsonNullability","enableOpenAPI","Directive","SLICE_OFFSETS","Start","Append","hasDirectives","line","directives","Object","values","some","directive","trim","startsWith","hasNoDirectives","extractDirectiveValue","lines","slice","getJSDocs","docString","docLines","split","filter","length","push","forEach","findCustomSchema","documentation","findSchemaAppends","appends","append","mapScalarType","String","Int","BigInt","DateTime","Float","Decimal","Json","Boolean","Bytes","getZodConstructor","field","getRelatedModelName","name","toString","schema","kind","type","prototype","hasOwnProperty","call","isCustom","custom","isList","isRequired","writeArray","writer","array","newLine","write","conditionalNewLine","useModelNames","formatModelName","prefix","result","toLowerCase","formatDtoName","modelName","dtoName","relatedModelName","needsRelatedModel","model","config","fields","dotSlash","input","converted","replace","includes","writeImportsForModel","sourceFile","schemaPath","outputPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","namedImports","path","relative","resolve","dirname","f","enumFields","importedEnums","Set","uniqueEnumFields","typeName","has","add","isTypeOnly","map","relationFields","filteredFields","Array","from","flatMap","addImportDeclarations","addVariableStatement","declarationKind","VariableDeclarationKind","Const","declarations","initializer","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","isExported","leadingTrivia","blankLineIfLastNot","inlineBlock","addClass","extends","generateRelatedSchemaForModel","addInterface","properties","hasQuestionToken","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generateEnumsFile","enums","enumsFile","members","memberName","value","addEnum","setIsExported","version","require","generatorHandler","onManifest","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","generator","output","clientPath","otherGenerators","find","each","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":"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"}